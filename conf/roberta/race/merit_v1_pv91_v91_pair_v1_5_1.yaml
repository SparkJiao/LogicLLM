hydra:
  run:
    dir: ./

train_file: race-reclor/race-train-reclor.json
dev_file: race-reclor/race-dev-reclor.json
test_file: race-reclor/race-test-reclor.json

# Model
model:
  _target_: models.roberta.RobertaForMultipleChoiceForZeroShot.from_pretrained
  mlp_hidden_size: 2048

# Data loading
read_tensor:
  _target_: data.mcqa.multiple_choice_get_tensor
  read_func:
    _target_: data.readers.ReClorReader
  max_seq_length: 512

extended_vocab:

# Data collator
collator:
  _target_: data.collators.Tuple2DictCollator

# Dataloader
num_workers: 4
prefetch_factor: 2

# Wiki path pretrain v8.2
#model_name_or_path: pretrained-models/roberta.large.wiki_erica_path_v9_v9.0.1aug.seq320.w4.2080Ti.rerun/checkpoint-500
#model_name_or_path: pretrained-models/roberta.large.wiki_erica_path_v9_v9.0.1aug.seq384.w4.adamw.mlm_0.5.500steps.8bit.2080Ti/checkpoint-500
#model_name_or_path: pretrained-models/roberta-large
#model_name_or_path: pretrained-models/roberta.large.wiki_erica_path_v9_v9.0.1aug.seq384.w2.adamw.mlm_1.0.A100/checkpoint-500
#model_name_or_path: pretrained-models/merit-roberta-large-v2
model_name_or_path: experiments/roberta.large.wiki_erica_path_v9.1_v9.1.pair.v1.5.1aug.seq512.w8.adamw.500steps.NA100/checkpoint-500
pretrain:

#output_dir: experiments/reclor.roberta.merit-v1.pv9.v9.0.rerun.cp500.w4.TitanXP.v1.0.s${seed}
#output_dir: experiments/reclor.roberta.merit-v1.pv9.v9.0.rerun.cp500.w2.TitanXP.v1.0.s${seed}
#output_dir: experiments/reclor.roberta.merit-v1.pv9.v9.0.seq384.A100-cp500-mlm_1.0.w2.A100.v1.0.s${seed}
#output_dir: experiments/race.roberta.merit-v1.pv9.v9.0.seq384.A100-cp500-mlm_1.0.w2.3090.v1.0.s${seed}
#output_dir: experiments/race.roberta.merit-v1.pv91-v91-pair-v1.0.seq512.w1.A40.v1.0.s${seed}
#output_dir: experiments/race.roberta.merit-v1.pv91-v91-pair-v1.3.seq512.w1.A100.v1.0.s${seed}
output_dir: experiments/race.roberta.merit-v1.pv91-v91-pair-v1.5.seq512.w1.A100.v1.1.s${seed}

do_train: True
evaluate_during_training: True

do_eval: True
eval_sub_path:

do_preprocess: False

# Training hyper-parameters
per_gpu_train_batch_size: 8
per_gpu_eval_batch_size: 16
learning_rate: 1e-5
#learning_rate: 5e-6
gradient_accumulation_steps: 2
weight_decay: 0.1
adam_epsilon: 1e-6
adam_betas: "(0.9, 0.98)"
#adam_betas: "(0.9, 0.999)"
max_grad_norm: 0.0
#max_grad_norm: 1.0
num_train_epochs: 4
max_steps: 0
warmup_proportion: 0.06
warmup_steps: 0

# Optimizer
optimizer:
use_nvlamb:
bit_training:

logging_steps: 5
save_steps: -1
save_best: True
eval_steps: 2000
ddp_eval: True
no_cuda: False
seed: 42
local_rank: -1
fp16: True
fp16_opt_level: O1
fp16_bfloat16: False

# Prediction config
prediction_cfg:
  metric: "acc"
  measure: 1
  best_checkpoint:
  best_result:
eval_forward_fn:
  _target_: general_util.evaluator.DiscriminatorForwardFn
post_process:

#dist_init:
#  _target_: general_util.dist_utils.setup_slurm_distributed


# fairscale.FullyShardedDP
fairscale_config:
  _target_: general_util.fsdp_utils.default_initialize
  fp16: ${fp16}
  reshard_after_forward: False
  move_grads_to_cpu: False
  move_params_to_cpu: False

# Deepspeed config
ds_cfg:
  train_micro_batch_size_per_gpu: ${per_gpu_train_batch_size}
  gradient_accumulation_steps: ${gradient_accumulation_steps}
  optimizer:
    type: AdamW
    params:
      lr: ${learning_rate}
      betas: [0.9, 0.999]
      eps: ${adam_epsilon}
      weight_decay: ${weight_decay}
  scheduler:
    type: WarmupDecayLR
    params:
      total_num_steps:
      warmup_max_lr: ${learning_rate}
      warmup_num_steps:
      warmup_type: linear
  gradient_clipping: ${max_grad_norm}
  fp16:
    enabled: ${fp16}
    initial_scale_power: 12
  zero_optimization:
    stage: 3
#    offload_optimizer:
#      device: cpu
#      pin_memory: True
#    offload_param:
#      device: cpu
#      pin_memory: True
#  activation_checkpointing:
#    partition_activations: True
#    cpu_checkpointing: True
#    contiguous_memory_optimization: False
#    number_checkpoints: False
#    synchronize_checkpoint_boundary: False
#    profile: False
  steps_per_print: 1024

summary_helper:
  _target_: general_util.tensorboard_helper.SummaryWriterHelper
  batch_index_or_keys:
  outputs_index_or_keys:

# Temporary variables
n_gpu:
device:
train_batch_size:
eval_batch_size:
world_size:
